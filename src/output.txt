CONSTTK const
INTTK int
IDENFR COMMON_VARIABLE1
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR COMMON_VARIABLE12
ASSIGN =
INTCON 0
COMMA ,
IDENFR COMMON_VARIABLE13
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR ONE_D_ARRAY1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ONE_D_ARRAY2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
IDENFR ONE_D_ARRAY3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR TWO_D_ARRAY1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR TWO_D_ARRAY2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
COMMA ,
IDENFR TWO_D_ARRAY3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR common_variable_n_1
SEMICN ;
INTTK int
IDENFR common_variable_n_2
COMMA ,
IDENFR common_variable_n_3
SEMICN ;
INTTK int
IDENFR one_d_array_n_1
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR one_d_array_n_2
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR one_d_array_n_3
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR two_d_array_n_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR two_d_array_n_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR two_d_array_n_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR common_variable_1
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR common_variable_2
ASSIGN =
INTCON 0
COMMA ,
IDENFR common_variable_3
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR one_d_array_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR one_d_array_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
IDENFR one_d_array_3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR two_d_array_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR two_d_array_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
COMMA ,
IDENFR two_d_array_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func4
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func6
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func7
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func8
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR is_odd
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func9
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR res
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
IDENFR y
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
AND &&
IDENFR y
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 6
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
OR ||
IDENFR y
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 7
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR x
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 8
SEMICN ;
RBRACE }
IFTK if
LPARENT (
PLUS +
IDENFR x
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 9
SEMICN ;
RBRACE }
IFTK if
LPARENT (
MINU -
IDENFR x
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
LBRACE {
RBRACE }
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MULT *
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
DIV /
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MOD %
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
MULT *
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR func9
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373007\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
