CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 2
MULT *
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR _a_b
LBRACK [
INTCON 2
MOD %
INTCON 2
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
RBRACE }
COMMA ,
IDENFR _a_3_b
LBRACK [
INTCON 2
DIV /
INTCON 2
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
MULT *
INTCON 1
MINU -
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 3452
MOD %
INTCON 2
PLUS +
INTCON 4
MULT *
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR c
COMMA ,
IDENFR d
LBRACK [
INTCON 2
MOD %
INTCON 2
PLUS +
INTCON 1
RBRACK ]
COMMA ,
IDENFR _a_4_b
LBRACK [
INTCON 2
DIV /
INTCON 2
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
MULT *
INTCON 1
MINU -
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 3452
MOD %
INTCON 2
PLUS +
INTCON 4
MULT *
INTCON 3
RBRACE }
RBRACE }
COMMA ,
IDENFR z
SEMICN ;
INTTK int
IDENFR _d_e
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR glo_1
COMMA ,
IDENFR glo_2
COMMA ,
IDENFR glo_3
COMMA ,
IDENFR glo_4
COMMA ,
IDENFR glo_5
COMMA ,
IDENFR glo_6
COMMA ,
IDENFR glo_7
COMMA ,
IDENFR glo_8
COMMA ,
IDENFR glo_9
SEMICN ;
VOIDTK void
IDENFR test_1
LPARENT (
INTTK int
IDENFR var_1
COMMA ,
INTTK int
IDENFR var_2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR var_3
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR var_1
PLUS +
IDENFR var_2
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR var_3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR f
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR g
ASSIGN =
INTCON 2
MULT *
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR _a_b_
LBRACK [
INTCON 2
MOD %
INTCON 2
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
RBRACE }
COMMA ,
IDENFR _a_3_b_d
LBRACK [
INTCON 2
DIV /
INTCON 2
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
MULT *
INTCON 1
MINU -
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 3452
MOD %
INTCON 2
PLUS +
INTCON 4
MULT *
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR c
COMMA ,
IDENFR d
LBRACK [
INTCON 2
MOD %
INTCON 2
PLUS +
INTCON 1
RBRACK ]
COMMA ,
IDENFR _a_4_b_d
LBRACK [
INTCON 2
DIV /
INTCON 2
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
MULT *
INTCON 1
MINU -
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 3452
MOD %
INTCON 2
PLUS +
INTCON 4
MULT *
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR _d_e_g
ASSIGN =
LPARENT (
IDENFR _a_3_b_d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR _a_4_b_d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
IDENFR b
PLUS +
INTCON 1
SEMICN ;
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR _a_4_b_d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR _d_e_g
PLUS +
IDENFR _a_4_b_d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR glo_1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_4
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_5
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_6
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_7
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_8
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR glo_9
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_1
LPARENT (
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR _a_4_b_d
RPARENT )
SEMICN ;
IDENFR while
LPARENT (
IDENFR glo_9
GRE >
INTCON 0
OR ||
IDENFR glo_8
GRE >
INTCON 0
AND &&
IDENFR glo_7
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR glo_2
GRE >
INTCON 2
RPARENT )
LBRACE {
IDENFR glo_2
ASSIGN =
IDENFR glo_2
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR glo_2
ASSIGN =
IDENFR glo_2
MINU -
INTCON 1
SEMICN ;
IDENFR glo_1
ASSIGN =
IDENFR glo_1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR glo_1
LSS <
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "19231076\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg1 is:%d;~\n"
COMMA ,
IDENFR glo_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg2 is:%d;~\n"
COMMA ,
IDENFR glo_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg3 is:%d;~\n"
COMMA ,
IDENFR glo_3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg4 is:%d;~\n"
COMMA ,
IDENFR glo_4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg5 is:%d;~\n"
COMMA ,
IDENFR glo_5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg6 is:%d;~\n"
COMMA ,
IDENFR glo_6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg7 is:%d;~\n"
COMMA ,
IDENFR glo_7
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg8 is:%d;~\n"
COMMA ,
IDENFR glo_8
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ">/!~varg9 is:%d;~\n"
COMMA ,
IDENFR glo_9
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
